#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 02, 2018 05:09:55 PM

import sys
from tkinter import simpledialog
from tkinter import filedialog
import tkinter.messagebox as tkMessageBox
import pandas as pandas
from sklearn import svm
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import BernoulliNB
from sklearn.metrics import accuracy_score
from sklearn.externals import joblib
from sklearn.model_selection import GridSearchCV
import numpy as np

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import modelselect_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    modelselect_support.set_Tk_var()
    top = Model_Selection (root)
    modelselect_support.init(root, top)
    root.mainloop()

w = None
def create_Model_Selection(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    modelselect_support.set_Tk_var()
    top = Model_Selection (w)
    modelselect_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Model_Selection():
    global w
    w.destroy()
    w = None


class Model_Selection:
    
    def close(self):
        msg=tkMessageBox.askyesno("Exit", "Are you sure?");
        if(msg):
            destroy_Model_Selection()
    
    def saveModel(self):
        joblib.dump(clf, 'classModel.pkl')
            
    def loadTrain(self):
        file_path = filedialog.askopenfilename()
        self.data = pandas.read_csv(file_path)
        self.class_true = self.data.iloc[:,-1]
        self.input_col = self.data.iloc[:, :-1]
            
    def applyAlgo(self):
        if (self.Listbox1.curselection()[0] == 0):
            parameters = {'kernel':('linear', 'rbf'), 'C':[1, 10]}
            svc = svm.SVC()
            clf = GridSearchCV(svc, parameters)
        elif (self.Listbox1.curselection()[0] == 1):
            parameters = { 'max_features' : ['auto', 'sqrt', 'log2'], 'max_depth': [None, 5, 3, 1], 'n_estimators':np.arange(1,11)}
            randforest = RandomForestClassifier()
            clf = GridSearchCV(randforest, parameters)
        elif (self.Listbox1.curselection()[0] == 2):
            parameters = {'solver':[ 'lbfgs', 'sgd', 'adam'], 'alpha':np.logspace(-6, -1, 5)}
            neural = MLPClassifier()
            clf = GridSearchCV(neural, parameters)
        else:
           parameters = {'alpha':np.arange(1, 11)}
           bnb = BernoulliNB()
           clf = GridSearchCV(bnb, parameters)
        
        clf.fit(self.input_col, self.class_true)
        
        params = clf.get_params()
        algoDetails=''
        for key, value in params.items():
            algoDetails = algoDetails+'\n'+key+' : '+str(value)
        self.Label5.configure(text=algoDetails)
        self.Label5.text = algoDetails
        
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Segoe UI Black} -size 16 -weight bold "  \
            "-slant roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 14 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("736x962+650+17")
        top.title("Model Selection")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.Button1 = Button(top)
        self.Button1.place(relx=0.08, rely=0.08, height=33, width=102)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Load CSV File''')

        self.Label1 = Label(top)
        self.Label1.place(relx=0.38, rely=0.02, height=43, width=217)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font10)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Model Selection''')

        self.Button2 = Button(top)
        self.Button2.place(relx=0.72, rely=0.15, height=33, width=62)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Apply''')

        self.Label2 = Label(top)
        self.Label2.place(relx=0.11, rely=0.15, height=26, width=120)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Select Algorithm:''')

        self.Listbox1 = Listbox(top)
        self.Listbox1.place(relx=0.3, rely=0.14, relheight=0.12, relwidth=0.39)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(highlightbackground="#d9d9d9")
        self.Listbox1.configure(highlightcolor="black")
        self.Listbox1.configure(selectbackground="#c4c4c4")
        self.Listbox1.configure(selectforeground="black")
        self.Listbox1.configure(width=284)
        self.Listbox1.configure(listvariable=modelselect_support.classVar)

        self.Button7 = Button(top)
        self.Button7.place(relx=0.84, rely=0.15, height=33, width=48)
        self.Button7.configure(activebackground="#d9d9d9")
        self.Button7.configure(activeforeground="#000000")
        self.Button7.configure(background="#d9d9d9")
        self.Button7.configure(disabledforeground="#a3a3a3")
        self.Button7.configure(foreground="#000000")
        self.Button7.configure(highlightbackground="#d9d9d9")
        self.Button7.configure(highlightcolor="black")
        self.Button7.configure(pady="0")
        self.Button7.configure(text='''Close''')

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        self.Label3 = Label(top)
        self.Label3.place(relx=0.29, rely=0.31, height=37, width=295)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font=font9)
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Clustering Algorithm Details''')

        self.Label5 = Label(top)
        self.Label5.place(relx=0.17, rely=0.36, height=500, width=500)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''Select algoirthm first''')

        self.Button3 = Button(top)
        self.Button3.place(relx=0.72, rely=0.21, height=33, width=66)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Save''')

        self.Button7.configure(command=self.close)
        self.Button3.configure(command=self.saveModel)
        self.Button1.configure(command=self.loadTrain)
        self.Button2.configure(command=self.applyAlgo)




if __name__ == '__main__':
    vp_start_gui()



