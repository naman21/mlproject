#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 02, 2018 01:28:15 PM

import sys
from tkinter import simpledialog
from tkinter import filedialog
import tkinter.messagebox as tkMessageBox
import pandas as pandas
from sklearn.cluster import KMeans
from sklearn.cluster import DBSCAN
from sklearn import metrics

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import clustering_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    clustering_support.set_Tk_var()
    top = Clustering (root)
    clustering_support.init(root, top)
    root.mainloop()

w = None
def create_Clustering(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    clustering_support.set_Tk_var()
    top = Clustering (w)
    clustering_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Clustering():
    global w
    w.destroy()
    w = None


class Clustering:
    
    def close(self):
        msg=tkMessageBox.askyesno("Exit", "Are you sure?");
        if(msg):
            destroy_Clustering()
    
    def saveCSV(self):
        self.data.to_csv("predictedClusters.csv", index=False)
            
    def loadCSV(self):
        file_path = filedialog.askopenfilename()
        self.data = pandas.read_csv(file_path)
        self.groundTruth=tkMessageBox.askyesno("Info", "Is the last column ground truth?")
        if(self.groundTruth):
            self.labels_true = self.data.iloc[:,-1]
            self.input_col = self.data.iloc[:, :-1]
            self.labels_cat = self.labels_true.astype('category').cat.codes
        else:
            self.input_col = self.data
    
    def applyAlgo(self):
        if (self.Listbox1.curselection()[0] == 0):
            n_clusters=int(simpledialog.askinteger("Info", "How many clusters?"))
            n_init=int(simpledialog.askinteger("Info", "How many times the k-means algorithm should run with different centroid seeds?"))
            max_iter=int(simpledialog.askinteger("Info", "What should be the maximum number of iterations of the k-means algorithm for a single run?"))
            model = KMeans(n_clusters=n_clusters, n_init=n_init, max_iter=max_iter, random_state=1).fit(self.input_col)
        elif (self.Listbox1.curselection()[0] == 1):
            min_samples=int(simpledialog.askinteger("Info", "How many samples (or total weight) in a neighborhood for a point to be considered as a core point?"))
            algorithm=simpledialog.askstring("Info", "Specify the algorithm to be used by the NearestNeighbors module to compute pointwise distances and find nearest neighbors. It must be one of ‘auto’, ‘ball_tree’, ‘kd_tree’, ‘brute’")
            model = DBSCAN(algorithm=algorithm, min_samples=min_samples).fit(self.input_col)
        
        labels = model.labels_
        self.data["PredictedCluster"] = pandas.DataFrame(labels, columns = ["PredictedCluster"])
        params = model.get_params()
        algoDetails=''
        for key, value in params.items():
            algoDetails = algoDetails+'\n'+key+' : '+str(value)
        self.Label5.configure(text=algoDetails)
        self.Label5.text = algoDetails
        
        algoResults=''
        if(self.groundTruth):
            adjusted_rand_score=str(metrics.adjusted_rand_score(self.labels_true, labels))
            algoResults = algoResults+'\n'+'adjusted_rand_score'+' : '+adjusted_rand_score
            
            adjusted_mutual_info_score=str(metrics.adjusted_mutual_info_score(self.labels_true, labels))
            algoResults = algoResults+'\n'+'adjusted_mutual_info_score'+' : '+adjusted_mutual_info_score
            mutual_info_score=str(metrics.mutual_info_score(self.labels_true, labels)) 
            algoResults = algoResults+'\n'+'mutual_info_score'+' : '+mutual_info_score
            
            homogeneity_score=str(metrics.homogeneity_score(self.labels_true, labels))
            algoResults = algoResults+'\n'+'homogeneity_score'+' : '+homogeneity_score
            
            completeness_score=str(metrics.completeness_score(self.labels_true, labels))
            algoResults = algoResults+'\n'+'completeness_score'+' : '+completeness_score
            
            v_measure_score=str(metrics.v_measure_score(self.labels_true, labels))
            algoResults = algoResults+'\n'+'v_measure_score'+' : '+v_measure_score
            
            fowlkes_mallows_score=str(metrics.fowlkes_mallows_score(self.labels_true, labels))
            algoResults = algoResults+'\n'+'fowlkes_mallows_score'+' : '+fowlkes_mallows_score
            
        silhouette_score=str(metrics.silhouette_score(self.input_col, labels, metric='euclidean'))
        algoResults = algoResults+'\n'+'silhouette_score'+' : '+silhouette_score
        
        calinski_harabaz_score=str(metrics.calinski_harabaz_score(self.input_col, labels))
        algoResults = algoResults+'\n'+'calinski_harabaz_score'+' : '+calinski_harabaz_score
        
        self.Label6.configure(text=algoResults)
        self.Label6.text = algoResults
        
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Segoe UI} -size 14 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI Black} -size 16 -weight bold -slant"  \
            " roman -underline 0 -overstrike 0"

        top.geometry("736x962+650+17")
        top.title("Clustering")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.Button1 = Button(top)
        self.Button1.place(relx=0.08, rely=0.08, height=33, width=102)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Load CSV File''')

        self.Label1 = Label(top)
        self.Label1.place(relx=0.42, rely=0.02, height=43, width=141)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Clustering''')

        self.Button2 = Button(top)
        self.Button2.place(relx=0.72, rely=0.15, height=33, width=62)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Apply''')
        self.Button2.configure(width=62)

        self.Label2 = Label(top)
        self.Label2.place(relx=0.11, rely=0.15, height=26, width=120)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Select Algorithm:''')

        self.Listbox1 = Listbox(top)
        self.Listbox1.place(relx=0.3, rely=0.14, relheight=0.12, relwidth=0.37)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(highlightbackground="#d9d9d9")
        self.Listbox1.configure(highlightcolor="black")
        self.Listbox1.configure(selectbackground="#c4c4c4")
        self.Listbox1.configure(selectforeground="black")
        self.Listbox1.configure(width=274)
        self.Listbox1.configure(listvariable=clustering_support.clusterVar)

        self.Button7 = Button(top)
        self.Button7.place(relx=0.84, rely=0.15, height=33, width=48)
        self.Button7.configure(activebackground="#d9d9d9")
        self.Button7.configure(activeforeground="#000000")
        self.Button7.configure(background="#d9d9d9")
        self.Button7.configure(disabledforeground="#a3a3a3")
        self.Button7.configure(foreground="#000000")
        self.Button7.configure(highlightbackground="#d9d9d9")
        self.Button7.configure(highlightcolor="black")
        self.Button7.configure(pady="0")
        self.Button7.configure(text='''Close''')

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        self.Label3 = Label(top)
        self.Label3.place(relx=0.07, rely=0.32, height=37, width=295)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font=font10)
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Clustering Algorithm Details''')

        self.Label4 = Label(top)
        self.Label4.place(relx=0.67, rely=0.32, height=37, width=79)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font=font10)
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Results''')

        self.Label5 = Label(top)
        self.Label5.place(relx=0.07, rely=0.38, height=200, width=300)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''Select algoirthm first''')

        self.Label6 = Label(top)
        self.Label6.place(relx=0.53, rely=0.38, height=200, width=300)
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(text='''Select algorithm first''')

        self.Button3 = Button(top)
        self.Button3.place(relx=0.72, rely=0.21, height=33, width=66)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Save''')
        self.Button3.configure(width=66)

        self.Button7.configure(command=self.close)
        self.Button3.configure(command=self.saveCSV)
        self.Button1.configure(command=self.loadCSV)
        self.Button2.configure(command=self.applyAlgo)
        



if __name__ == '__main__':
    vp_start_gui()



