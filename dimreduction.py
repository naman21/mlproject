#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 02, 2018 02:42:48 AM

import sys
from tkinter import simpledialog
from tkinter import filedialog
import tkinter.messagebox as tkMessageBox
import pandas as pandas
import matplotlib.pyplot as plt
import numpy as np
from sklearn.decomposition import PCA, IncrementalPCA, KernelPCA
from PIL import Image

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import dimreduction_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    dimreduction_support.set_Tk_var()
    top = Dimensionality_Reduction (root)
    dimreduction_support.init(root, top)
    root.mainloop()

w = None
def create_Dimensionality_Reduction(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    dimreduction_support.set_Tk_var()
    top = Dimensionality_Reduction (w)
    dimreduction_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Dimensionality_Reduction():
    global w
    w.destroy()
    w = None


class Dimensionality_Reduction:
    
    def close(self):
        msg=tkMessageBox.askyesno("Exit", "Are you sure?");
        if(msg):
            destroy_Dimensionality_Reduction()
    
    def saveComponents(self):
        df_components = pandas.DataFrame(self.input_components)
        df_components.to_csv("reducedComponents.csv", index=False)
            
    def loadCSV(self):
        file_path = filedialog.askopenfilename()
        self.data = pandas.read_csv(file_path)
        self.groundTruth=tkMessageBox.askyesno("Info", "Is the last column ground truth?")
        if(self.groundTruth):
            self.labels_true = self.data.iloc[:,-1]
            self.input_col = self.data.iloc[:, :-1]
            self.labels_cat = self.labels_true.astype('category').cat.codes
        else:
            self.input_col = self.data
    
    def selectAlgo(self):
        self.selectedAlgo = self.Listbox1.curselection()
        if (self.Listbox1.curselection()[0] == 0):
            self.whiten=tkMessageBox.askyesno("Info", "Do you want to perform whitening?")
        elif (self.Listbox1.curselection()[0] == 2):
            self.whiten=tkMessageBox.askyesno("Info", "Do you want to perform whitening?")
            self.batchSize=int(simpledialog.askinteger("Info", "What's the batch size?"))
        else:
            tkMessageBox.showinfo("Alert", "Kernel PCA Selected. Now select kernel for KernelPCA algorithm.")
            
    def selectKernel(self):
        if (self.Listbox2.curselection()[0] == 0):
            self.kernelType = 'linear'
        elif (self.Listbox2.curselection()[0] == 1):
            self.kernelType = 'poly'
        elif (self.Listbox2.curselection()[0] == 2):
            self.kernelType = 'rbf'
        elif (self.Listbox2.curselection()[0] == 3):
            self.kernelType = 'sigmoid'
        elif (self.Listbox2.curselection()[0] == 4):
            self.kernelType = 'cosine'
        else:
            self.kernelType = 'precomputed'
        tkMessageBox.showinfo("Alert", "Kernel Type Selected")
    
    def applyAlgo(self):
        N_COMPONENTS = int(self.Entry1.get())
        if (self.selectedAlgo[0] == 0):
            model = PCA(n_components=N_COMPONENTS, whiten=self.whiten)
        elif (self.selectedAlgo[0] == 1):
            model = KernelPCA(n_components=N_COMPONENTS, kernel =self.kernelType)
        else:
            model = IncrementalPCA(n_components=N_COMPONENTS, whiten=self.whiten, batch_size=self.batchSize)
        self.input_components = model.fit_transform(self.input_col)
        print(self.input_components)
        if(self.groundTruth):
            colors = ['red', 'blue', 'green', 'navy', 'turquoise', 'darkorange']
            target_names = ['Cluster 1', 'Cluster 2', 'Cluster 3', 'Cluster 4', 'Cluster 5', 'Cluster 6']
            
            plt.figure(figsize=(5, 5))
            plt.xlabel('Component 1')
            plt.ylabel('Component 2')
            plt.title('Data Visualization')
            
            for color, target_name, i in zip(colors, target_names, [0, 1, 2]):
                plt.scatter(self.input_components[self.labels_cat.values == i, 0], self.input_components[self.labels_cat.values == i, 1], color=color, label=target_name)
                
            plt.legend(loc="best", shadow=False, scatterpoints=1)
            plt.savefig('pca.png')
            plt.show()
            
            selectedPhoto = PhotoImage(file='pca.png')
            self.Button3.configure(image=selectedPhoto)
            self.Button3.image = selectedPhoto
        
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font9 = "-family {Segoe UI Black} -size 16 -weight bold -slant"  \
            " roman -underline 0 -overstrike 0"

        top.geometry("736x962+650+17")
        top.title("Dimensionality Reduction")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.Button1 = Button(top)
        self.Button1.place(relx=0.08, rely=0.11, height=33, width=102)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Load CSV File''')

        self.Label1 = Label(top)
        self.Label1.place(relx=0.24, rely=0.02, height=43, width=346)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Dimensionality Reduction''')

        self.Button2 = Button(top)
        self.Button2.place(relx=0.35, rely=0.24, height=33, width=62)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Select''')
        self.Button2.configure(width=62)

        self.Label2 = Label(top)
        self.Label2.place(relx=0.14, rely=0.2, height=26, width=120)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Select Algorithm:''')

        self.Listbox1 = Listbox(top)
        self.Listbox1.place(relx=0.14, rely=0.23, relheight=0.09, relwidth=0.2)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(highlightbackground="#d9d9d9")
        self.Listbox1.configure(highlightcolor="black")
        self.Listbox1.configure(selectbackground="#c4c4c4")
        self.Listbox1.configure(selectforeground="black")
        self.Listbox1.configure(width=10)
        self.Listbox1.configure(listvariable=dimreduction_support.algoVar)
        
        self.Button7 = Button(top)
        self.Button7.place(relx=0.87, rely=0.36, height=33, width=48)
        self.Button7.configure(activebackground="#d9d9d9")
        self.Button7.configure(activeforeground="#000000")
        self.Button7.configure(background="#d9d9d9")
        self.Button7.configure(disabledforeground="#a3a3a3")
        self.Button7.configure(foreground="#000000")
        self.Button7.configure(highlightbackground="#d9d9d9")
        self.Button7.configure(highlightcolor="black")
        self.Button7.configure(pady="0")
        self.Button7.configure(text='''Close''')

        self.Button8 = Button(top)
        self.Button8.place(relx=0.67, rely=0.36, height=33, width=131)
        self.Button8.configure(activebackground="#d9d9d9")
        self.Button8.configure(activeforeground="#000000")
        self.Button8.configure(background="#d9d9d9")
        self.Button8.configure(disabledforeground="#a3a3a3")
        self.Button8.configure(foreground="#000000")
        self.Button8.configure(highlightbackground="#d9d9d9")
        self.Button8.configure(highlightcolor="black")
        self.Button8.configure(pady="0")
        self.Button8.configure(text='''Save Components''')

        self.Label4 = Label(top)
        self.Label4.place(relx=0.07, rely=0.36, height=26, width=169)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Number of Components:''')

        self.Entry1 = Entry(top)
        self.Entry1.place(relx=0.34, rely=0.36,height=24, relwidth=0.09)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(width=64)

        self.Button4 = Button(top)
        self.Button4.place(relx=0.48, rely=0.36, height=33, width=61)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Apply''')
        self.Button4.configure(width=61)

        self.Button3 = Button(top)
        self.Button3.place(relx=0.07, rely=0.44, height=420, width=420)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Data Visualization''')
        self.Button3.configure(width=636)

        self.Label3 = Label(top)
        self.Label3.place(relx=0.53, rely=0.2, height=26, width=233)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''If KernelPCA, select type of Kernel:''')

        self.Listbox2 = Listbox(top)
        self.Listbox2.place(relx=0.53, rely=0.23, relheight=0.1, relwidth=0.14)
        self.Listbox2.configure(background="white")
        self.Listbox2.configure(disabledforeground="#a3a3a3")
        self.Listbox2.configure(font="TkFixedFont")
        self.Listbox2.configure(foreground="#000000")
        self.Listbox2.configure(width=104)
        self.Listbox2.configure(listvariable=dimreduction_support.kernelVar)

        self.Button5 = Button(top)
        self.Button5.place(relx=0.71, rely=0.24, height=33, width=52)
        self.Button5.configure(activebackground="#d9d9d9")
        self.Button5.configure(activeforeground="#000000")
        self.Button5.configure(background="#d9d9d9")
        self.Button5.configure(disabledforeground="#a3a3a3")
        self.Button5.configure(foreground="#000000")
        self.Button5.configure(highlightbackground="#d9d9d9")
        self.Button5.configure(highlightcolor="black")
        self.Button5.configure(pady="0")
        self.Button5.configure(text='''Select''')

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)
        
        self.Button7.configure(command=self.close)
        self.Button1.configure(command=self.loadCSV)
        self.Button2.configure(command=self.selectAlgo)
        self.Button5.configure(command=self.selectKernel)
        self.Button4.configure(command=self.applyAlgo)
        self.Button8.configure(command=self.saveComponents)



if __name__ == '__main__':
    vp_start_gui()



