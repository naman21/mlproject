#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 02, 2018 02:56:11 PM

import sys
from tkinter import simpledialog
from tkinter import filedialog
import tkinter.messagebox as tkMessageBox
import pandas as pandas
from sklearn import svm
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import BernoulliNB
from sklearn.metrics import accuracy_score
from sklearn.externals import joblib
import numpy as np

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import classification_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    classification_support.set_Tk_var()
    top = Classification (root)
    classification_support.init(root, top)
    root.mainloop()

w = None
def create_Classification(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    classification_support.set_Tk_var()
    top = Classification (w)
    classification_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Classification():
    global w
    w.destroy()
    w = None


class Classification:
    
    def close(self):
        msg=tkMessageBox.askyesno("Exit", "Are you sure?");
        if(msg):
            destroy_Classification()
    
    def saveCSV(self):
        (self.testdata.join(self.predictedClass)).to_csv("predictedClass.csv", index=False)
            
    def loadTrain(self):
        file_path = filedialog.askopenfilename()
        self.data = pandas.read_csv(file_path)
        self.class_true = self.data.iloc[:,-1]
        self.input_col = self.data.iloc[:, :-1]
    
    def loadTest(self):
        file_path = filedialog.askopenfilename()
        self.testdata = pandas.read_csv(file_path)
    
    def loadGt(self):
        file_path = filedialog.askopenfilename()
        self.gtdata = pandas.read_csv(file_path)
            
    def applyAlgo(self):
        if (self.Listbox1.curselection()[0] == 0):
            c=int(simpledialog.askinteger("Info", "What's the penalty parameter C of the error term?"))
            kernel=simpledialog.askstring("Info", "Specify the kernel type to be used. It must be one of ‘linear’, ‘poly’, ‘rbf’, ‘sigmoid’, ‘precomputed’")     
            clf = svm.SVC(C=c, kernel=kernel)
        elif (self.Listbox1.curselection()[0] == 1):
            max_depth=int(simpledialog.askinteger("Info", "What's the maximum depth of the tree"))
            n_estimators=int(simpledialog.askinteger("Info", "What's the number of trees in the forest?"))
            max_features=simpledialog.askstring("Info", "Specify the number of features to consider when looking for the best split. It must be one of 'auto', 'sqrt', 'log2'") 
            clf = RandomForestClassifier(max_features=max_features, max_depth=max_depth, n_estimators=n_estimators)
        elif (self.Listbox1.curselection()[0] == 2):
            alpha=simpledialog.askfloat("Info", "What's the L2 penalty (regularization term) parameter?")
            solver=simpledialog.askstring("Info", "Specify the solver for weight optimization. It must be one of 'lbfgs', 'sgd', 'adam'")
            clf = MLPClassifier(solver=solver, alpha=alpha)
        else:
            alpha=int(simpledialog.askinteger("Info", "Specify additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing)?"))
            clf = BernoulliNB(alpha=alpha)
        
        clf.fit(self.input_col, self.class_true)
        predClass = clf.predict(self.testdata)
        self.predictedClass = pandas.DataFrame(predClass, columns = ["PredictedClass"])
        print(self.predictedClass)
        params = clf.get_params()
        algoDetails=''
        for key, value in params.items():
            algoDetails = algoDetails+'\n'+key+' : '+str(value)
        self.Label5.configure(text=algoDetails)
        self.Label5.text = algoDetails
        
        accu_score=str(100*accuracy_score(self.gtdata.iloc[:,-1].values, self.predictedClass.iloc[:,-1].values))+' %'
        algoResult = 'accuracy_score'+' : '+accu_score
        self.Label6.configure(text=algoResult)
        self.Label6.text = algoResult
        
        joblib.dump(clf, 'classModel.pkl')
        
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Segoe UI} -size 14 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI Black} -size 16 -weight bold -slant"  \
            " roman -underline 0 -overstrike 0"

        top.geometry("736x962+650+17")
        top.title("Classification")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.Button1 = Button(top)
        self.Button1.place(relx=0.08, rely=0.08, height=33, width=141)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Load Train Data set''')

        self.Label1 = Label(top)
        self.Label1.place(relx=0.38, rely=0.02, height=43, width=181)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Classification''')

        self.Button2 = Button(top)
        self.Button2.place(relx=0.72, rely=0.15, height=33, width=62)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Apply''')
        self.Button2.configure(width=62)

        self.Label2 = Label(top)
        self.Label2.place(relx=0.11, rely=0.15, height=26, width=120)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Select Algorithm:''')

        self.Listbox1 = Listbox(top)
        self.Listbox1.place(relx=0.3, rely=0.14, relheight=0.12, relwidth=0.37)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(highlightbackground="#d9d9d9")
        self.Listbox1.configure(highlightcolor="black")
        self.Listbox1.configure(selectbackground="#c4c4c4")
        self.Listbox1.configure(selectforeground="black")
        self.Listbox1.configure(width=274)
        self.Listbox1.configure(listvariable=classification_support.classVar)

        self.Button7 = Button(top)
        self.Button7.place(relx=0.84, rely=0.15, height=33, width=48)
        self.Button7.configure(activebackground="#d9d9d9")
        self.Button7.configure(activeforeground="#000000")
        self.Button7.configure(background="#d9d9d9")
        self.Button7.configure(disabledforeground="#a3a3a3")
        self.Button7.configure(foreground="#000000")
        self.Button7.configure(highlightbackground="#d9d9d9")
        self.Button7.configure(highlightcolor="black")
        self.Button7.configure(pady="0")
        self.Button7.configure(text='''Close''')

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        self.Label3 = Label(top)
        self.Label3.place(relx=0.07, rely=0.32, height=37, width=325)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font=font10)
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Classification Algorithm Details''')

        self.Label4 = Label(top)
        self.Label4.place(relx=0.67, rely=0.32, height=37, width=79)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font=font10)
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Results''')

        self.Label5 = Label(top)
        self.Label5.place(relx=0.07, rely=0.38, height=200, width=300)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''Select algoirthm first''')

        self.Label6 = Label(top)
        self.Label6.place(relx=0.53, rely=0.38, height=200, width=300)
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(text='''Select algorithm first''')

        self.Button3 = Button(top)
        self.Button3.place(relx=0.72, rely=0.21, height=33, width=66)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Save''')
        self.Button3.configure(width=66)

        self.Button4 = Button(top)
        self.Button4.place(relx=0.3, rely=0.08, height=33, width=136)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Load Test Data set''')
        self.Button4.configure(width=136)

        self.Button5 = Button(top)
        self.Button5.place(relx=0.52, rely=0.08, height=33, width=249)
        self.Button5.configure(activebackground="#d9d9d9")
        self.Button5.configure(activeforeground="#000000")
        self.Button5.configure(background="#d9d9d9")
        self.Button5.configure(disabledforeground="#a3a3a3")
        self.Button5.configure(foreground="#000000")
        self.Button5.configure(highlightbackground="#d9d9d9")
        self.Button5.configure(highlightcolor="black")
        self.Button5.configure(pady="0")
        self.Button5.configure(text='''Load Ground Truth for Test Data set''')

        self.Button7.configure(command=self.close)
        self.Button3.configure(command=self.saveCSV)
        self.Button1.configure(command=self.loadTrain)
        self.Button2.configure(command=self.applyAlgo)
        self.Button4.configure(command=self.loadTest)
        self.Button5.configure(command=self.loadGt)




if __name__ == '__main__':
    vp_start_gui()



